<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="first__window_8c" kind="file" language="C++">
    <compoundname>first_window.c</compoundname>
    <includes local="no">SFML/Graphics.h</includes>
    <includes local="no">SFML/Window.h</includes>
    <includes local="no">SFML/System.h</includes>
    <includes local="no">SFML/Audio.h</includes>
    <includes local="no">SFML/Network.h</includes>
    <includes local="no">SFML/Config.h</includes>
    <includes local="no">SFML/OpenGL.h</includes>
    <incdepgraph>
      <node id="3">
        <label>SFML/Window.h</label>
      </node>
      <node id="7">
        <label>SFML/Config.h</label>
      </node>
      <node id="2">
        <label>SFML/Graphics.h</label>
      </node>
      <node id="1">
        <label>/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c</label>
        <link refid="first__window_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>SFML/Network.h</label>
      </node>
      <node id="4">
        <label>SFML/System.h</label>
      </node>
      <node id="8">
        <label>SFML/OpenGL.h</label>
      </node>
      <node id="5">
        <label>SFML/Audio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="first__window_8c_1aae3e0fb361a9e5abfb4c1ea3fb515a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_window</definition>
        <argsstring>(void)</argsstring>
        <name>create_window</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a basic window using CSFML library. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a window with the specified dimensions and title using the CSFML library. The window remains open until it is closed by the user. <programlisting><codeline><highlight class="normal">void<sp/>create_window(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>sfVideoMode<sp/>object<sp/>with<sp/>the<sp/>desired<sp/>dimensions<sp/>and<sp/>color<sp/>depth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sfVideoMode<sp/>mode<sp/>=<sp/>{800,<sp/>600,<sp/>32};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>sfRenderWindow<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sfRenderWindow<sp/>*window<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>sfEvent<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sfEvent<sp/>event;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>the<sp/>window</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>window<sp/>=<sp/>sfRenderWindow_create(mode,<sp/>&quot;My<sp/>window&quot;,<sp/>sfResize<sp/>|<sp/>sfClose,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>window<sp/>creation<sp/>failed,<sp/>return<sp/>84</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>if<sp/>(!window)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(84);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Principal<sp/>loop<sp/>that<sp/>keeps<sp/>the<sp/>window<sp/>open</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>while<sp/>(sfRenderWindow_isOpen(window)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Secondary<sp/>loop<sp/>that<sp/>poll<sp/>the<sp/>events</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(sfRenderWindow_pollEvent(window,<sp/>&amp;event)){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>user<sp/>closes<sp/>the<sp/>window,<sp/>close<sp/>the<sp/>window</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(event.type<sp/>==<sp/>sfEvtClosed)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_close(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>the<sp/>window<sp/>with<sp/>a<sp/>black<sp/>color</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_clear(window,<sp/>sfBlack);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Display<sp/>the<sp/>window</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_display(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Destroy<sp/>the<sp/>window</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_destroy(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int, that determine if the programm has been executed correctly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c" line="65" column="5" bodyfile="/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c" bodystart="65" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="first__window_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c" line="103" column="5" bodyfile="/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c" bodystart="103" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the first example of a basic window creation using CSFML library. </para>
    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">int<sp/>main(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Call<sp/>the<sp/>create_window<sp/>function<sp/>and<sp/>return<sp/>84<sp/>if<sp/>it<sp/>fails</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(create_window()<sp/>==<sp/>84)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(84);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> This file contains the main function which is the entry point of the program. It calls the create_window function and returns 84 if it fails. Then it returns 0. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>first<sp/>example,<sp/>2023</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>CSFML_DOC</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>main.c</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Graphics.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Window.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/System.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Audio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Network.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/OpenGL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="first__window_8c_1aae3e0fb361a9e5abfb4c1ea3fb515a7f" kindref="member">create_window</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>sfVideoMode<sp/>mode<sp/>=<sp/>{800,<sp/>600,<sp/>32};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>sfRenderWindow<sp/>*window<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>sfEvent<sp/>event;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>window<sp/>=<sp/>sfRenderWindow_create(mode,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>window&quot;</highlight><highlight class="normal">,<sp/>sfResize<sp/>|<sp/>sfClose,<sp/>NULL);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(84);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sfRenderWindow_isOpen(window)){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sfRenderWindow_pollEvent(window,<sp/>&amp;event)){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>sfEvtClosed)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_close(window);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_clear(window,<sp/>sfBlack);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfRenderWindow_display(window);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>sfRenderWindow_destroy(window);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="first__window_8c_1aae3e0fb361a9e5abfb4c1ea3fb515a7f" kindref="member">create_window</ref>()<sp/>==<sp/>84)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(84);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/enichy/Documents/Doxygene/CSFML_DOC/Documentation/basic_part/first_example/first_window.c"/>
  </compounddef>
</doxygen>
